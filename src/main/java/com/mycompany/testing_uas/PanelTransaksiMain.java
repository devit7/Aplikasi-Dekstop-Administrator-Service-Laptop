/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.mycompany.testing_uas;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.time.chrono.IsoEra;
import java.util.ArrayList;

/**
 *
 * @author satan
 */
public class PanelTransaksiMain extends javax.swing.JPanel {

    /**
     * Creates new form PanelTransaksiMain
     */
    public PanelTransaksiMain() {
        initComponents();
        tblTransaksi.setModel(model);
        jTable1.setModel(model2);
        CellListener();
        LoadKolom();
        LoadTransaksi();
        Tampiltransaksi();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransaksi = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBackground(new java.awt.Color(239, 199, 194));
        setPreferredSize(new java.awt.Dimension(833, 695));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TRANSAKSI");
        jLabel1.setToolTipText("");

        tblTransaksi.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nama Pengambil", "Nama Pemilik Barang", "Keluhan", "Harga"
            }
        ));
        tblTransaksi.setGridColor(new java.awt.Color(194, 234, 239));
        tblTransaksi.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTransaksiMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTransaksi);

        btnInsert.setText("Add+");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setText("Delete");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(btnInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButtonDelete)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnInsert)
                    .addComponent(btnUpdate)
                    .addComponent(jButtonDelete))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Keluhan", "Harga"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 461, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(46, 46, 46))
        );
    }// </editor-fold>//GEN-END:initComponents
    DefaultTableModel model = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    DefaultTableModel model2 = new DefaultTableModel(){
        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
    private Connection con = Database.getConnection();
    private ArrayList<Transaksi> listTransaksi = new ArrayList<>();
    private ArrayList<Keluhan> listKeluhan = new ArrayList<>();
    private int id_transaksi, id_detail_barang;
    private String nama_pengambil;
    float total;

    public boolean checkIsi(String no_barang_check) {
        System.out.println("Check Isi dijalankan");
        System.out.println("no_barang di check : " + no_barang_check);
        for (Transaksi transaksi : listTransaksi) {
            System.out.println("no trans :"+transaksi.getNomor_Barang());
            if (transaksi.getNomor_Barang().equals(no_barang_check)) {
                System.out.println("Check isi true");
                return true;
            }
        }
        System.out.println("Check isi false");
        return false;
    }
    private void CellListener(){
        btnUpdate.setEnabled(false);
        jButtonDelete.setEnabled(false);
        tblTransaksi.getSelectionModel().addListSelectionListener(e -> {
            boolean isFirstEvent = true;
            if (!e.getValueIsAdjusting()) {
                isFirstEvent = false;
            } else {
                boolean selectedRow = tblTransaksi.getSelectedRow() != -1;
                btnUpdate.setEnabled(selectedRow);
                jButtonDelete.setEnabled(selectedRow);
                LoadKeluhan();
                TampilKeluhan();
                System.out.println("tabel di klik");
            }
        });
    }
    public void LoadKolom(){

        model.addColumn("NOMOR Transaksi");
        model.addColumn("Nama Pengambil");
        model.addColumn("Nama Pemilik Barang");
        model.addColumn("Total Harga");
        model.addColumn("Tanggal");
        model2.addColumn("Keluhan");
        model2.addColumn("Harga");
        System.out.println("load kolom jalan");
    }
    //Mengambil data dari database lalu dimasukkan ke arraylist
    public void LoadTransaksi(){
        if(con != null){
            System.out.println("Koneksi terhubung");
            listTransaksi =new ArrayList();
            String sql = "SELECT * FROM customer c JOIN detail_barang db ON c.id_customer = db.id_customer JOIN transaksi t ON db.id_detail_barang = t.id_detail_barang";
            try{
                System.out.println("Load Transaksi Jalan");
                PreparedStatement ps = con.prepareStatement(sql);

                ResultSet rs = ps.executeQuery();

                while(rs.next()){
                    this.id_transaksi = rs.getInt("id_transaksi");
                    String nama_pengambil = rs.getString("nama_pengambil");
                    String nama_pemilik = rs.getString("nama");
                    String Nomor_Transaksi = rs.getString("Nomor_Transaksi");
                    String Nomor_Barang = rs.getString("nomor_barang");
                    String tgl = rs.getString("tanggal_transaksi");
                    double harga = rs.getDouble("total_harga");
                    Transaksi transaksi = new Transaksi(id_transaksi, nama_pengambil, nama_pemilik, Nomor_Transaksi, harga, tgl, Nomor_Barang);
                    //masukan ke arraylist
                    listTransaksi.add(transaksi);
                    System.out.println("load transaksi jalan id transaksi : "+id_transaksi+"nama "+nama_pemilik+nama_pengambil);
                }

                rs.close();
                ps.close();
            }catch(Exception e){
                System.out.println("Error Load Transaksi : "+e.getMessage());
            }
        }
    }

    public void Tampiltransaksi(){
        model.setRowCount(0);
        //isi table No
        for(Transaksi transaksi : listTransaksi){
            model.addRow( new Object[]{transaksi.getNomor_Transaksi(), transaksi.getNama_pengambil(), transaksi.getNama_pemilik(), "Rp."+transaksi.getHarga(), transaksi.getTgl()});
        }
        System.out.println("tampil sukses");
    }
    public void TampilKeluhan(){
        model2.setRowCount(0);
        for(Keluhan keluhan : listKeluhan){
            model2.addRow(new Object[]{keluhan.getKeluhan(), keluhan.getPrice()});
        }
    }
    public void LoadKeluhan(){
        int barisTerpilih = tblTransaksi.getSelectedRow();
        listKeluhan = new ArrayList<>();
        System.out.println("Load Keluhan dijalankan");
        try {
            String sql2 = "SELECT * FROM detail_barang db JOIN data_service ds ON db.id_detail_barang = ds.id_detail_barang JOIN transaksi t ON db.id_detail_barang = t.id_detail_barang WHERE t.id_transaksi = ?";
            PreparedStatement ps2 = con.prepareStatement(sql2);
            ps2.setInt(1, listTransaksi.get(barisTerpilih).getId_transaksi());
            System.out.println("P"+listTransaksi.get(barisTerpilih).getId_transaksi());
            ResultSet rs2 = ps2.executeQuery();
            while (rs2.next()) {
                String keluhan = rs2.getString("service_tambahan");
                double price = rs2.getDouble("price");
                int id_data_service = rs2.getInt("id_data_service");
                Keluhan kelkeluhan = new Keluhan(id_data_service, price, keluhan);
                listKeluhan.add(kelkeluhan);
            }
        } catch(Exception e){
            System.out.println("Error Load Keluhan : "+e.getMessage());
        }
    }
    public void refresh(){
        LoadTransaksi();
        Tampiltransaksi();
    }
    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        TransaksiUpdate insertTransaksi = new TransaksiUpdate(null, true);
        insertTransaksi.GantiNama(1);
        insertTransaksi.setVisible(true);
        insertTransaksi.pack();
        insertTransaksi.setLocationRelativeTo(null);
        insertTransaksi.setDefaultCloseOperation(TransaksiUpdate.DISPOSE_ON_CLOSE);
        id_detail_barang = insertTransaksi.getId_detail_barang();
        nama_pengambil = insertTransaksi.getNama_pengambil();
        total = insertTransaksi.getTotal();
        System.out.println("id servic"+id_detail_barang+"nama pengambil:"+nama_pengambil);
        System.out.println("total : " + total);
        refresh();
    }//GEN-LAST:event_btnInsertActionPerformed

    private void tblTransaksiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTransaksiMouseClicked
    }//GEN-LAST:event_tblTransaksiMouseClicked

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        TransaksiUpdate updateTransaksi = new TransaksiUpdate(null, true);
        int barisTerpilih = tblTransaksi.getSelectedRow();
        updateTransaksi.DataDiterima(listTransaksi.get(barisTerpilih).getId_transaksi(), listTransaksi.get(barisTerpilih).getNama_pengambil());
        updateTransaksi.GantiNama(2);
        updateTransaksi.setVisible(true);
        updateTransaksi.pack();
        updateTransaksi.setLocationRelativeTo(null);
        updateTransaksi.setDefaultCloseOperation(TransaksiUpdate.DISPOSE_ON_CLOSE);
        refresh();
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        int baristerpilih =  tblTransaksi.getSelectedRow();
        int id_transaksi = listTransaksi.get(baristerpilih).getId_transaksi();
            try{
                String sql = "DELETE FROM transaksi WHERE id_transaksi = ?";
                PreparedStatement ps = con.prepareStatement(sql);
                ps.setInt(1, id_transaksi);
                ps.executeUpdate();
                ps.close();
                refresh();
                listKeluhan = new ArrayList<>();
                TampilKeluhan();
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Data gagal dihapus/terdapat data yang terkait");
                System.out.println("Error Delete : "+e.getMessage());
            }
    }//GEN-LAST:event_jButtonDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable tblTransaksi;
    // End of variables declaration//GEN-END:variables
}
class Transaksi{
    int id_transaksi;
    String nama_pengambil, nama_pemilik, Nomor_Transaksi, tgl, Nomor_Barang;
    double harga;

    public Transaksi(int id_transaksi, String nama_pengambil, String nama_pemilik, String Nomor_Transaksi, double harga, String tgl, String Nomor_Barang) {
        this.id_transaksi = id_transaksi;
        this.nama_pengambil = nama_pengambil;
        this.nama_pemilik = nama_pemilik;
        this.Nomor_Transaksi = Nomor_Transaksi;
        this.harga = harga;
        this.tgl = tgl;
        this.Nomor_Barang = Nomor_Barang;
    }

    public String getNama_pengambil() {
        return nama_pengambil;
    }

    public String getNama_pemilik() {
        return nama_pemilik;
    }

    public String getNomor_Transaksi() {
        return Nomor_Transaksi;
    }

    public String getTgl() {
        return tgl;
    }

    public double getHarga() {
        return harga;
    }

    public int getId_transaksi() {
        return id_transaksi;
    }

    public String getNomor_Barang() {
        return Nomor_Barang;
    }
}
class Keluhan{
    int id_data_service;
    double price;
    String keluhan;

    public Keluhan(int id_data_service, double price, String keluhan) {
        this.id_data_service = id_data_service;
        this.price = price;
        this.keluhan = keluhan;
    }

    public int getId_data_service() {
        return id_data_service;
    }

    public double getPrice() {
        return price;
    }

    public String getKeluhan() {
        return keluhan;
    }
}